"""
√âcran de scan QR Code pour l'application mobile ITSM Compagnon
Permet de scanner les codes QR des √©quipements pour acc√®s rapide
"""

from kivy.uix.screenmanager import Screen
from kivymd.uix.boxlayout import MDBoxLayout
from kivymd.uix.card import MDCard
from kivymd.uix.button import MDRaisedButton, MDIconButton, MDFlatButton
from kivymd.uix.label import MDLabel
from kivymd.uix.toolbar import MDTopAppBar
from kivymd.uix.dialog import MDDialog
from kivymd.uix.list import OneLineListItem, TwoLineListItem
from kivymd.uix.snackbar import MDSnackbar
from kivy.uix.camera import Camera
from kivy.metrics import dp
from kivy.logger import Logger
from kivy.clock import Clock
from kivy.uix.image import Image


class QRScannerScreen(Screen):
    """√âcran de scan de codes QR"""
    
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.qr_scanner = None
        self.is_scanning = False
        self.camera_widget = None
        self.current_camera_index = 0  # Index de la cam√©ra actuelle
        self.available_cameras = []    # Liste des cam√©ras disponibles
        self.build_ui()
    
    def build_ui(self):
        """Construire l'interface utilisateur"""
        # Layout principal
        main_layout = MDBoxLayout(
            orientation='vertical',
            spacing=dp(10)
        )
        
        # Barre d'outils
        toolbar = MDTopAppBar(
            title="Scanner QR Code",
            left_action_items=[["arrow-left", lambda x: self.go_back()]],
            right_action_items=[
                ["camera-switch", lambda x: self.switch_camera()],
                ["flashlight", lambda x: self.toggle_flashlight()],
                ["image", lambda x: self.scan_from_gallery()]
            ]
        )
        
        # Zone de scan
        self.scan_area = MDBoxLayout(
            orientation='vertical',
            spacing=dp(20),
            padding=dp(20)
        )
        
        # Titre
        title = MDLabel(
            text="Positionnez le code QR dans le cadre",
            theme_text_color="Primary",
            font_style="H6",
            halign="center",
            size_hint_y=None,
            height=dp(40)
        )
        
        # Zone cam√©ra/placeholder
        self.camera_container = MDCard(
            size_hint=(1, 0.6),
            elevation=3,
            padding=dp(10)
        )
        
        # Placeholder pour la cam√©ra
        self.camera_placeholder = MDBoxLayout(
            orientation='vertical',
            spacing=dp(20)
        )
        
        placeholder_icon = MDLabel(
            text="üì∑",
            font_size="72sp",
            halign="center",
            size_hint_y=None,
            height=dp(100)
        )
        
        placeholder_text = MDLabel(
            text="Scanner QR disponible\nOpenCV non install√© - Mode simulation activ√©\nUtilisez 'Scanner depuis galerie' ou saisissez manuellement",
            theme_text_color="Secondary",
            halign="center",
            size_hint_y=None,
            height=dp(80)
        )
        
        self.camera_placeholder.add_widget(placeholder_icon)
        self.camera_placeholder.add_widget(placeholder_text)
        self.camera_container.add_widget(self.camera_placeholder)
        
        # Boutons de contr√¥le
        button_layout = MDBoxLayout(
            orientation='horizontal',
            spacing=dp(20),
            adaptive_height=True,
            size_hint_y=None,
            height=dp(60)
        )
        
        self.scan_button = MDRaisedButton(
            text="D√©marrer le scan",
            size_hint_x=0.25,
            on_release=self.toggle_scanning
        )
        
        gallery_button = MDRaisedButton(
            text="Galerie",
            size_hint_x=0.25,
            on_release=self.scan_from_gallery
        )
        
        manual_button = MDRaisedButton(
            text="Saisie manuelle",
            size_hint_x=0.25,
            on_release=self.manual_qr_input
        )
        
        iriun_button = MDRaisedButton(
            text="Iriun",
            size_hint_x=0.25,
            on_release=self.force_iriun_camera
        )
        
        button_layout.add_widget(self.scan_button)
        button_layout.add_widget(gallery_button)
        button_layout.add_widget(manual_button)
        button_layout.add_widget(iriun_button)
        
        # Instructions
        instructions_card = MDCard(
            size_hint_y=None,
            height=dp(120),
            padding=dp(15),
            elevation=2
        )
        
        instructions = MDLabel(
            text="Instructions:\n‚Ä¢ Pointez la cam√©ra vers le code QR\n‚Ä¢ Maintenez l'appareil stable\n‚Ä¢ Assurez-vous d'avoir un bon √©clairage",
            theme_text_color="Secondary",
            size_hint_y=None,
            height=dp(90)
        )
        
        instructions_card.add_widget(instructions)
        
        # Assembler la zone de scan
        self.scan_area.add_widget(title)
        self.scan_area.add_widget(self.camera_container)
        self.scan_area.add_widget(button_layout)
        self.scan_area.add_widget(instructions_card)
        
        # Assembler le layout principal
        main_layout.add_widget(toolbar)
        main_layout.add_widget(self.scan_area)
        
        # Ajouter au screen
        self.add_widget(main_layout)
        
        # Initialiser le scanner
        Clock.schedule_once(self.initialize_scanner, 0.5)
    
    def initialize_scanner(self, dt):
        """Initialiser le scanner QR"""
        try:
            try:
                from ..utils.qr_scanner import QRScanner
            except ImportError:
                from utils.qr_scanner import QRScanner
            self.qr_scanner = QRScanner(camera_index=self.current_camera_index)
            
            # V√©rifier si le scanner est disponible
            if self.qr_scanner.is_available():
                # Toujours essayer de configurer la cam√©ra
                self.setup_camera()
            else:
                Logger.warning("QRScannerScreen: Scanner non disponible")
                
        except Exception as e:
            Logger.error(f"QRScannerScreen: Erreur initialisation scanner: {e}")
    
    def setup_camera(self):
        """Configurer la cam√©ra"""
        try:
            # D√©tecter les cam√©ras disponibles
            self.detect_cameras()
            
            # Remplacer le placeholder par la cam√©ra
            self.camera_container.clear_widgets()
            
            # Cr√©er le widget cam√©ra avec l'index actuel et d√©marrer automatiquement
            self.camera_widget = Camera(
                resolution=(640, 480),
                play=True,  # D√©marrer automatiquement la cam√©ra
                index=self.current_camera_index
            )
            
            self.camera_container.add_widget(self.camera_widget)
            
            # Mettre √† jour le bouton
            self.scan_button.text = "D√©marrer le scan"
            self.scan_button.disabled = False
            
            # Afficher des informations sur la cam√©ra
            camera_info = f"Cam√©ra {self.current_camera_index} active"
            if len(self.available_cameras) > 1:
                camera_info += f" ({len(self.available_cameras)} disponibles)"
            
            self.show_info(camera_info)
            Logger.info(f"QRScannerScreen: Cam√©ra {self.current_camera_index} configur√©e et d√©marr√©e")
            
        except Exception as e:
            Logger.error(f"QRScannerScreen: Erreur configuration cam√©ra: {e}")
            self.show_error(f"Erreur cam√©ra: {str(e)}")
    
    def detect_cameras(self):
        """D√©tecter les cam√©ras disponibles"""
        try:
            self.available_cameras = []
            
            # Tester les indices de cam√©ra de 0 √† 4 (couvre la plupart des cas)
            for i in range(5):
                try:
                    # Test rapide avec OpenCV si disponible
                    if hasattr(self.qr_scanner, 'get_camera_info'):
                        camera_info = self.qr_scanner.get_camera_info()
                        if camera_info['cameras']:
                            self.available_cameras = [cam['index'] for cam in camera_info['cameras']]
                            break
                    else:
                        # Fallback : ajouter les indices standards
                        self.available_cameras = [0, 1, 2]  # Indices les plus communs
                        break
                except:
                    continue
            
            if not self.available_cameras:
                self.available_cameras = [0]  # Au moins l'index 0 par d√©faut
            
            # Par d√©faut, utiliser la webcam de la machine (index 0)
            # D√©tecter sp√©cifiquement Iriun (souvent sur l'index 1 ou 2) mais ne pas l'utiliser par d√©faut
            iriun_index = self.detect_iriun_camera()
            if iriun_index is not None and iriun_index not in self.available_cameras:
                self.available_cameras.append(iriun_index)
                Logger.info(f"QRScannerScreen: Iriun d√©tect√© sur index {iriun_index} (disponible via bouton Iriun)")
            
            Logger.info(f"QRScannerScreen: Cam√©ras d√©tect√©es: {self.available_cameras}")
            
        except Exception as e:
            Logger.error(f"QRScannerScreen: Erreur d√©tection cam√©ras: {e}")
            self.available_cameras = [0]
    
    def detect_iriun_camera(self):
        """D√©tecter sp√©cifiquement la cam√©ra Iriun"""
        try:
            # Iriun est souvent sur les indices 1, 2 ou 3
            for index in [1, 2, 3]:
                try:
                    # Test simple avec Kivy Camera
                    from kivy.uix.camera import Camera
                    test_camera = Camera(index=index, resolution=(320, 240))
                    # Si √ßa marche, c'est probablement une cam√©ra valide
                    test_camera = None  # Lib√©rer
                    return index
                except:
                    continue
            return None
        except Exception as e:
            Logger.error(f"QRScannerScreen: Erreur d√©tection Iriun: {e}")
            return None
    
    def switch_camera(self):
        """Changer de cam√©ra"""
        try:
            if len(self.available_cameras) <= 1:
                self.show_info("Une seule cam√©ra disponible")
                return
            
            # Arr√™ter le scan en cours
            if self.is_scanning:
                self.stop_scanning()
            
            # Passer √† la cam√©ra suivante
            current_pos = self.available_cameras.index(self.current_camera_index) if self.current_camera_index in self.available_cameras else 0
            next_pos = (current_pos + 1) % len(self.available_cameras)
            self.current_camera_index = self.available_cameras[next_pos]
            
            # R√©initialiser le scanner QR avec le nouvel index
            try:
                from ..utils.qr_scanner import QRScanner
            except ImportError:
                from utils.qr_scanner import QRScanner
            self.qr_scanner = QRScanner(camera_index=self.current_camera_index)
            
            # Reconfigurer la cam√©ra
            self.setup_camera()
            
            Logger.info(f"QRScannerScreen: Changement vers cam√©ra {self.current_camera_index}")
            
        except Exception as e:
            Logger.error(f"QRScannerScreen: Erreur changement cam√©ra: {e}")
            self.show_error(f"Erreur changement cam√©ra: {str(e)}")
    
    def toggle_scanning(self, button):
        """D√©marrer/arr√™ter le scan"""
        try:
            if not self.is_scanning:
                self.start_scanning()
            else:
                self.stop_scanning()
        except Exception as e:
            Logger.error(f"QRScannerScreen: Erreur toggle scan: {e}")
            self.show_error(f"Erreur: {str(e)}")
    
    def start_scanning(self):
        """D√©marrer le scan"""
        try:
            if not self.qr_scanner:
                self.show_error("Scanner non disponible")
                return
            
            # D√©marrer la cam√©ra
            if self.camera_widget:
                self.camera_widget.play = True
            
            # D√©marrer le scan
            success = self.qr_scanner.start_scanning(self.on_qr_detected)
            
            if success:
                self.is_scanning = True
                self.scan_button.text = "Arr√™ter le scan"
                self.show_info("Scan en cours...")
                Logger.info("QRScannerScreen: Scan d√©marr√©")
            else:
                self.show_error("Impossible de d√©marrer le scan")
                
        except Exception as e:
            Logger.error(f"QRScannerScreen: Erreur d√©marrage scan: {e}")
            self.show_error(f"Erreur: {str(e)}")
    
    def stop_scanning(self):
        """Arr√™ter le scan"""
        try:
            if self.qr_scanner:
                self.qr_scanner.stop_scanning()
            
            # Arr√™ter la cam√©ra
            if self.camera_widget:
                self.camera_widget.play = False
            
            self.is_scanning = False
            self.scan_button.text = "D√©marrer le scan"
            
            Logger.info("QRScannerScreen: Scan arr√™t√©")
            
        except Exception as e:
            Logger.error(f"QRScannerScreen: Erreur arr√™t scan: {e}")
    
    def on_qr_detected(self, qr_data):
        """Callback appel√© quand un QR code est d√©tect√©"""
        try:
            Logger.info(f"QRScannerScreen: QR d√©tect√©: {qr_data}")
            
            # Arr√™ter le scan
            Clock.schedule_once(lambda dt: self.stop_scanning(), 0)
            
            # Valider les donn√©es QR
            if self.qr_scanner:
                validation = self.qr_scanner.validate_qr_data(qr_data)
                Clock.schedule_once(lambda dt: self.process_qr_data(qr_data, validation), 0)
            
        except Exception as e:
            Logger.error(f"QRScannerScreen: Erreur traitement QR: {e}")
    
    def process_qr_data(self, qr_data, validation):
        """Traiter les donn√©es du QR code"""
        try:
            if not validation['valid']:
                self.show_error("Code QR non reconnu")
                return
            
            qr_type = validation['type']
            
            if qr_type in ['machine_id', 'serial_number', 'inventory_number']:
                # Rechercher la machine
                self.search_machine(qr_data)
            elif qr_type == 'json':
                # Traiter les donn√©es JSON
                self.process_json_qr(validation['parsed'])
            elif qr_type == 'url':
                # Ouvrir l'URL
                self.open_url(validation['parsed']['url'])
            else:
                # Afficher les donn√©es
                self.show_qr_result(qr_data, validation)
                
        except Exception as e:
            Logger.error(f"QRScannerScreen: Erreur traitement donn√©es QR: {e}")
            self.show_error(f"Erreur traitement: {str(e)}")
    
    def search_machine(self, qr_data):
        """Rechercher une machine par code QR"""
        try:
            from kivymd.app import MDApp
            app = MDApp.get_running_app()
            
            # Afficher un indicateur de chargement
            self.show_info("Recherche de la machine...")
            
            # Effectuer la recherche dans un thread
            import threading
            search_thread = threading.Thread(
                target=self.perform_machine_search,
                args=(qr_data,),
                daemon=True
            )
            search_thread.start()
            
        except Exception as e:
            Logger.error(f"QRScannerScreen: Erreur recherche machine: {e}")
            self.show_error(f"Erreur recherche: {str(e)}")
    
    def perform_machine_search(self, qr_data):
        """Effectuer la recherche de machine (dans un thread)"""
        try:
            from kivymd.app import MDApp
            app = MDApp.get_running_app()
            
            success, machine_data = app.api_client.search_machine_by_qr(qr_data)
            
            # Programmer la mise √† jour de l'UI
            Clock.schedule_once(
                lambda dt: self.on_machine_search_result(success, machine_data, qr_data), 
                0
            )
            
        except Exception as e:
            Logger.error(f"QRScannerScreen: Erreur recherche thread: {e}")
            Clock.schedule_once(
                lambda dt: self.on_machine_search_result(False, {'error': str(e)}, qr_data), 
                0
            )
    
    def on_machine_search_result(self, success, result, qr_data):
        """G√©rer le r√©sultat de la recherche de machine"""
        try:
            if success:
                # Machine trouv√©e, afficher les d√©tails
                self.show_machine_details(result)
            else:
                error_msg = result.get('error', 'Machine non trouv√©e')
                self.show_error(error_msg)
                # Proposer de cr√©er un ticket
                self.offer_create_ticket(qr_data)
                
        except Exception as e:
            Logger.error(f"QRScannerScreen: Erreur r√©sultat recherche: {e}")
    
    def show_machine_details(self, machine_data):
        """Afficher les d√©tails de la machine trouv√©e"""
        try:
            machine_name = machine_data.get('nom', 'Machine inconnue')
            machine_status = machine_data.get('statut', 'Statut inconnu')
            machine_user = machine_data.get('utilisateur_info', {}).get('nom_complet', 'Non assign√©')
            
            def go_to_machine():
                dialog.dismiss()
                # Aller √† l'√©cran des machines avec cette machine s√©lectionn√©e
                self.go_to_machine_detail(machine_data)
            
            def create_ticket():
                dialog.dismiss()
                # Aller √† la cr√©ation de ticket pour cette machine
                self.create_ticket_for_machine(machine_data)
            
            dialog = MDDialog(
                title=f"Machine trouv√©e: {machine_name}",
                text=f"Statut: {machine_status}\nUtilisateur: {machine_user}",
                buttons=[
                    MDFlatButton(
                        text="VOIR D√âTAILS",
                        on_release=lambda x: go_to_machine()
                    ),
                    MDFlatButton(
                        text="CR√âER TICKET",
                        on_release=lambda x: create_ticket()
                    ),
                    MDFlatButton(
                        text="FERMER",
                        on_release=lambda x: dialog.dismiss()
                    ),
                ],
            )
            dialog.open()
            
        except Exception as e:
            Logger.error(f"QRScannerScreen: Erreur affichage d√©tails machine: {e}")
    
    def scan_from_gallery(self, button=None):
        """Scanner un QR code depuis la galerie"""
        try:
            # Placeholder pour l'impl√©mentation de la galerie
            self.show_info("Fonctionnalit√© galerie √† impl√©menter")
            
            # TODO: Impl√©menter la s√©lection d'image depuis la galerie
            # et le scan du QR code dans l'image
            
        except Exception as e:
            Logger.error(f"QRScannerScreen: Erreur scan galerie: {e}")
            self.show_error(f"Erreur: {str(e)}")
    
    def manual_qr_input(self, button=None):
        """Saisie manuelle d'un code QR"""
        try:
            from kivymd.uix.dialog import MDDialog
            from kivymd.uix.textfield import MDTextField
            from kivymd.uix.button import MDFlatButton, MDRaisedButton
            
            # Champ de saisie
            qr_field = MDTextField(
                hint_text="Saisissez le code QR (ID machine, num√©ro s√©rie, etc.)",
                multiline=False,
                size_hint_y=None,
                height=dp(60)
            )
            
            def process_manual_qr(instance):
                qr_data = qr_field.text.strip()
                if qr_data:
                    dialog.dismiss()
                    # Traiter le code QR saisi manuellement
                    self.on_qr_detected(qr_data)
                else:
                    self.show_error("Veuillez saisir un code QR")
            
            dialog = MDDialog(
                title="Saisie manuelle du code QR",
                type="custom",
                content_cls=qr_field,
                buttons=[
                    MDFlatButton(
                        text="ANNULER",
                        on_release=lambda x: dialog.dismiss()
                    ),
                    MDRaisedButton(
                        text="VALIDER",
                        on_release=process_manual_qr
                    ),
                ],
            )
            dialog.open()
            
        except Exception as e:
            Logger.error(f"QRScannerScreen: Erreur saisie manuelle: {e}")
            self.show_error(f"Erreur: {str(e)}")
    
    def force_iriun_camera(self, button=None):
        """Forcer l'utilisation de la cam√©ra Iriun"""
        try:
            # Arr√™ter le scan en cours
            if self.is_scanning:
                self.stop_scanning()
            
            # Essayer l'index 1 (Iriun par d√©faut)
            self.current_camera_index = 1
            
            # Ajouter l'index 1 aux cam√©ras disponibles s'il n'y est pas
            if 1 not in self.available_cameras:
                self.available_cameras.append(1)
            
            # R√©initialiser le scanner QR avec l'index Iriun
            try:
                from ..utils.qr_scanner import QRScanner
            except ImportError:
                from utils.qr_scanner import QRScanner
            self.qr_scanner = QRScanner(camera_index=self.current_camera_index)
            
            # Reconfigurer la cam√©ra
            self.setup_camera()
            
            self.show_info("Cam√©ra Iriun forc√©e (index 1)")
            Logger.info("QRScannerScreen: Cam√©ra Iriun forc√©e sur index 1")
            
        except Exception as e:
            Logger.error(f"QRScannerScreen: Erreur force Iriun: {e}")
            self.show_error(f"Erreur Iriun: {str(e)}")
    
    def toggle_flashlight(self):
        """Activer/d√©sactiver la lampe torche"""
        try:
            # Placeholder pour l'impl√©mentation de la lampe torche
            self.show_info("Lampe torche √† impl√©menter")
            
            # TODO: Impl√©menter le contr√¥le de la lampe torche
            
        except Exception as e:
            Logger.error(f"QRScannerScreen: Erreur lampe torche: {e}")
    
    def go_to_machine_detail(self, machine_data):
        """Aller aux d√©tails de la machine"""
        try:
            # Changer vers l'√©cran des machines
            self.manager.current = 'machines'
            
            # Passer les donn√©es de la machine √† l'√©cran
            machines_screen = self.manager.get_screen('machines')
            if hasattr(machines_screen, 'show_machine_detail'):
                machines_screen.show_machine_detail(machine_data)
                
        except Exception as e:
            Logger.error(f"QRScannerScreen: Erreur navigation machine: {e}")
    
    def create_ticket_for_machine(self, machine_data):
        """Cr√©er un ticket pour la machine"""
        try:
            # Changer vers l'√©cran des tickets
            self.manager.current = 'tickets'
            
            # Passer les donn√©es de la machine √† l'√©cran
            tickets_screen = self.manager.get_screen('tickets')
            if hasattr(tickets_screen, 'create_ticket_for_machine'):
                tickets_screen.create_ticket_for_machine(machine_data)
                
        except Exception as e:
            Logger.error(f"QRScannerScreen: Erreur cr√©ation ticket: {e}")
    
    def offer_create_ticket(self, qr_data):
        """Proposer de cr√©er un ticket pour un √©quipement non trouv√©"""
        try:
            dialog = MDDialog(
                title="√âquipement non trouv√©",
                text=f"Aucune machine trouv√©e pour le code: {qr_data}\n\nVoulez-vous cr√©er un ticket d'incident?",
                buttons=[
                    MDFlatButton(
                        text="CR√âER TICKET",
                        on_release=lambda x: self.create_generic_ticket(qr_data, dialog)
                    ),
                    MDFlatButton(
                        text="ANNULER",
                        on_release=lambda x: dialog.dismiss()
                    ),
                ],
            )
            dialog.open()
            
        except Exception as e:
            Logger.error(f"QRScannerScreen: Erreur proposition ticket: {e}")
    
    def create_generic_ticket(self, qr_data, dialog):
        """Cr√©er un ticket g√©n√©rique"""
        try:
            dialog.dismiss()
            
            # Aller √† l'√©cran des tickets avec des donn√©es pr√©-remplies
            self.manager.current = 'tickets'
            
            tickets_screen = self.manager.get_screen('tickets')
            if hasattr(tickets_screen, 'create_ticket_with_qr'):
                tickets_screen.create_ticket_with_qr(qr_data)
                
        except Exception as e:
            Logger.error(f"QRScannerScreen: Erreur cr√©ation ticket g√©n√©rique: {e}")
    
    def show_info(self, message):
        """Afficher un message d'information"""
        try:
            MDSnackbar(
                MDLabel(
                    text=message,
                    theme_text_color="Custom",
                    text_color="white"
                ),
                y=dp(24),
                pos_hint={"center_x": 0.5},
                size_hint_x=0.9,
            ).open()
        except Exception as e:
            Logger.error(f"QRScannerScreen: Erreur affichage info: {e}")
    
    def show_error(self, message):
        """Afficher un message d'erreur"""
        try:
            MDSnackbar(
                MDLabel(
                    text=message,
                    theme_text_color="Custom",
                    text_color="white"
                ),
                y=dp(24),
                pos_hint={"center_x": 0.5},
                size_hint_x=0.9,
                md_bg_color="red"
            ).open()
        except Exception as e:
            Logger.error(f"QRScannerScreen: Erreur affichage erreur: {e}")
    
    def go_back(self):
        """Retourner √† l'√©cran pr√©c√©dent"""
        try:
            self.stop_scanning()
            self.manager.current = 'dashboard'
        except Exception as e:
            Logger.error(f"QRScannerScreen: Erreur retour: {e}")
    
    def on_enter(self):
        """Appel√© quand l'√©cran devient actif"""
        try:
            Logger.info("QRScannerScreen: √âcran activ√©")
        except Exception as e:
            Logger.error(f"QRScannerScreen: Erreur on_enter: {e}")
    
    def on_leave(self):
        """Appel√© quand l'√©cran devient inactif"""
        try:
            # Arr√™ter le scan quand on quitte l'√©cran
            self.stop_scanning()
            Logger.info("QRScannerScreen: √âcran d√©sactiv√©")
        except Exception as e:
            Logger.error(f"QRScannerScreen: Erreur on_leave: {e}")