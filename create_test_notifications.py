#!/usr/bin/env python
"""
Script pour cr√©er des notifications de test pour l'utilisateur @aa.jess.cd
"""
import os
import sys
import django

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'itsm_backend.settings')
django.setup()

from apps.users.models import User
from apps.tickets.models import Ticket, CommentaireTicket, NotificationTicket
from django.utils import timezone

def create_test_notifications():
    """Cr√©er des notifications de test"""
    try:
        # R√©cup√©rer l'utilisateur @aa.jess.cd
        user = User.objects.get(username='@aa.jess.cd')
        print(f"‚úÖ Utilisateur trouv√©: {user.username} - {user.nom_complet}")
        
        # R√©cup√©rer ou cr√©er un ticket pour cet utilisateur
        ticket = Ticket.objects.filter(demandeur=user).first()
        if not ticket:
            # Cr√©er un ticket de test
            from apps.tickets.models import CategorieTicket
            categorie = CategorieTicket.objects.first()
            
            ticket = Ticket.objects.create(
                titre="Probl√®me de connexion r√©seau",
                description="Je n'arrive pas √† me connecter au r√©seau de l'entreprise",
                demandeur=user,
                priorite='normale',
                categorie=categorie
            )
            print(f"‚úÖ Ticket cr√©√©: {ticket.numero}")
        else:
            print(f"‚úÖ Ticket existant trouv√©: {ticket.numero}")
        
        # R√©cup√©rer un admin pour cr√©er des commentaires
        admin_user = User.objects.filter(role='admin').first()
        if not admin_user:
            print("‚ùå Aucun admin trouv√©")
            return
        
        print(f"‚úÖ Admin trouv√©: {admin_user.username}")
        
        # Cr√©er des commentaires de test (qui vont automatiquement cr√©er des notifications)
        commentaires_test = [
            "Bonjour, j'ai bien re√ßu votre demande. Je vais examiner le probl√®me de connexion r√©seau.",
            "Apr√®s v√©rification, il semble que votre machine ne soit pas correctement configur√©e pour le r√©seau.",
            "Pouvez-vous red√©marrer votre machine et r√©essayer la connexion ?",
            "Si le probl√®me persiste, nous devrons peut-√™tre reconfigurer vos param√®tres r√©seau."
        ]
        
        for i, contenu in enumerate(commentaires_test):
            commentaire = CommentaireTicket.objects.create(
                ticket=ticket,
                auteur=admin_user,
                contenu=contenu,
                type_commentaire='commentaire'
            )
            print(f"‚úÖ Commentaire {i+1} cr√©√©: {contenu[:50]}...")
        
        # V√©rifier les notifications cr√©√©es
        notifications = NotificationTicket.objects.filter(destinataire=user)
        print(f"‚úÖ {notifications.count()} notifications cr√©√©es pour {user.username}")
        
        for notif in notifications:
            print(f"  - Ticket {notif.ticket.numero}: {notif.commentaire.contenu[:50]}... (Lu: {notif.lu})")
        
        print("\nüéâ Notifications de test cr√©√©es avec succ√®s!")
        print(f"L'utilisateur {user.username} devrait maintenant voir {notifications.count()} commentaires dans l'application desktop.")
        
    except User.DoesNotExist:
        print("‚ùå Utilisateur @aa.jess.cd non trouv√©")
        print("Utilisateurs disponibles:")
        for u in User.objects.all():
            print(f"  - {u.username}")
    except Exception as e:
        print(f"‚ùå Erreur: {e}")

if __name__ == '__main__':
    create_test_notifications()